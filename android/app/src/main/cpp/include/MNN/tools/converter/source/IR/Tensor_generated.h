// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TENSOR_MNN_H_
#define FLATBUFFERS_GENERATED_TENSOR_MNN_H_

#include "flatbuffers/flatbuffers.h"

#include "Type_generated.h"

namespace MNN {

struct Blob;
struct BlobT;

inline const flatbuffers::TypeTable *BlobTypeTable();

enum MNN_DATA_FORMAT {
  MNN_DATA_FORMAT_NCHW = 0,
  MNN_DATA_FORMAT_NHWC = 1,
  MNN_DATA_FORMAT_NC4HW4 = 2,
  MNN_DATA_FORMAT_NHWC4 = 3,
  MNN_DATA_FORMAT_UNKNOWN = 4,
  MNN_DATA_FORMAT_MIN = MNN_DATA_FORMAT_NCHW,
  MNN_DATA_FORMAT_MAX = MNN_DATA_FORMAT_UNKNOWN
};

inline const MNN_DATA_FORMAT (&EnumValuesMNN_DATA_FORMAT())[5] {
  static const MNN_DATA_FORMAT values[] = {
    MNN_DATA_FORMAT_NCHW,
    MNN_DATA_FORMAT_NHWC,
    MNN_DATA_FORMAT_NC4HW4,
    MNN_DATA_FORMAT_NHWC4,
    MNN_DATA_FORMAT_UNKNOWN
  };
  return values;
}

inline const char * const *EnumNamesMNN_DATA_FORMAT() {
  static const char * const names[] = {
    "NCHW",
    "NHWC",
    "NC4HW4",
    "NHWC4",
    "UNKNOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameMNN_DATA_FORMAT(MNN_DATA_FORMAT e) {
  if (e < MNN_DATA_FORMAT_NCHW || e > MNN_DATA_FORMAT_UNKNOWN) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesMNN_DATA_FORMAT()[index];
}

struct BlobT : public flatbuffers::NativeTable {
  typedef Blob TableType;
  std::vector<int32_t> dims;
  MNN_DATA_FORMAT dataFormat;
  DataType dataType;
  std::vector<uint8_t> uint8s;
  std::vector<int8_t> int8s;
  std::vector<int32_t> int32s;
  std::vector<int64_t> int64s;
  std::vector<float> float32s;
  std::vector<std::string> strings;
  BlobT()
      : dataFormat(MNN_DATA_FORMAT_NCHW),
        dataType(DataType_DT_FLOAT) {
  }
};

struct Blob FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BlobT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return BlobTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DIMS = 4,
    VT_DATAFORMAT = 6,
    VT_DATATYPE = 8,
    VT_UINT8S = 10,
    VT_INT8S = 12,
    VT_INT32S = 14,
    VT_INT64S = 16,
    VT_FLOAT32S = 18,
    VT_STRINGS = 20
  };
  const flatbuffers::Vector<int32_t> *dims() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_DIMS);
  }
  flatbuffers::Vector<int32_t> *mutable_dims() {
    return GetPointer<flatbuffers::Vector<int32_t> *>(VT_DIMS);
  }
  MNN_DATA_FORMAT dataFormat() const {
    return static_cast<MNN_DATA_FORMAT>(GetField<int8_t>(VT_DATAFORMAT, 0));
  }
  bool mutate_dataFormat(MNN_DATA_FORMAT _dataFormat) {
    return SetField<int8_t>(VT_DATAFORMAT, static_cast<int8_t>(_dataFormat), 0);
  }
  DataType dataType() const {
    return static_cast<DataType>(GetField<int32_t>(VT_DATATYPE, 1));
  }
  bool mutate_dataType(DataType _dataType) {
    return SetField<int32_t>(VT_DATATYPE, static_cast<int32_t>(_dataType), 1);
  }
  const flatbuffers::Vector<uint8_t> *uint8s() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_UINT8S);
  }
  flatbuffers::Vector<uint8_t> *mutable_uint8s() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_UINT8S);
  }
  const flatbuffers::Vector<int8_t> *int8s() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_INT8S);
  }
  flatbuffers::Vector<int8_t> *mutable_int8s() {
    return GetPointer<flatbuffers::Vector<int8_t> *>(VT_INT8S);
  }
  const flatbuffers::Vector<int32_t> *int32s() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INT32S);
  }
  flatbuffers::Vector<int32_t> *mutable_int32s() {
    return GetPointer<flatbuffers::Vector<int32_t> *>(VT_INT32S);
  }
  const flatbuffers::Vector<int64_t> *int64s() const {
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_INT64S);
  }
  flatbuffers::Vector<int64_t> *mutable_int64s() {
    return GetPointer<flatbuffers::Vector<int64_t> *>(VT_INT64S);
  }
  const flatbuffers::Vector<float> *float32s() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_FLOAT32S);
  }
  flatbuffers::Vector<float> *mutable_float32s() {
    return GetPointer<flatbuffers::Vector<float> *>(VT_FLOAT32S);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *strings() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_STRINGS);
  }
  flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *mutable_strings() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_STRINGS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DIMS) &&
           verifier.VerifyVector(dims()) &&
           VerifyField<int8_t>(verifier, VT_DATAFORMAT) &&
           VerifyField<int32_t>(verifier, VT_DATATYPE) &&
           VerifyOffset(verifier, VT_UINT8S) &&
           verifier.VerifyVector(uint8s()) &&
           VerifyOffset(verifier, VT_INT8S) &&
           verifier.VerifyVector(int8s()) &&
           VerifyOffset(verifier, VT_INT32S) &&
           verifier.VerifyVector(int32s()) &&
           VerifyOffset(verifier, VT_INT64S) &&
           verifier.VerifyVector(int64s()) &&
           VerifyOffset(verifier, VT_FLOAT32S) &&
           verifier.VerifyVector(float32s()) &&
           VerifyOffset(verifier, VT_STRINGS) &&
           verifier.VerifyVector(strings()) &&
           verifier.VerifyVectorOfStrings(strings()) &&
           verifier.EndTable();
  }
  BlobT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(BlobT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Blob> Pack(flatbuffers::FlatBufferBuilder &_fbb, const BlobT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct BlobBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dims(flatbuffers::Offset<flatbuffers::Vector<int32_t>> dims) {
    fbb_.AddOffset(Blob::VT_DIMS, dims);
  }
  void add_dataFormat(MNN_DATA_FORMAT dataFormat) {
    fbb_.AddElement<int8_t>(Blob::VT_DATAFORMAT, static_cast<int8_t>(dataFormat), 0);
  }
  void add_dataType(DataType dataType) {
    fbb_.AddElement<int32_t>(Blob::VT_DATATYPE, static_cast<int32_t>(dataType), 1);
  }
  void add_uint8s(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> uint8s) {
    fbb_.AddOffset(Blob::VT_UINT8S, uint8s);
  }
  void add_int8s(flatbuffers::Offset<flatbuffers::Vector<int8_t>> int8s) {
    fbb_.AddOffset(Blob::VT_INT8S, int8s);
  }
  void add_int32s(flatbuffers::Offset<flatbuffers::Vector<int32_t>> int32s) {
    fbb_.AddOffset(Blob::VT_INT32S, int32s);
  }
  void add_int64s(flatbuffers::Offset<flatbuffers::Vector<int64_t>> int64s) {
    fbb_.AddOffset(Blob::VT_INT64S, int64s);
  }
  void add_float32s(flatbuffers::Offset<flatbuffers::Vector<float>> float32s) {
    fbb_.AddOffset(Blob::VT_FLOAT32S, float32s);
  }
  void add_strings(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> strings) {
    fbb_.AddOffset(Blob::VT_STRINGS, strings);
  }
  explicit BlobBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BlobBuilder &operator=(const BlobBuilder &);
  flatbuffers::Offset<Blob> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Blob>(end);
    return o;
  }
};

inline flatbuffers::Offset<Blob> CreateBlob(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> dims = 0,
    MNN_DATA_FORMAT dataFormat = MNN_DATA_FORMAT_NCHW,
    DataType dataType = DataType_DT_FLOAT,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> uint8s = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> int8s = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> int32s = 0,
    flatbuffers::Offset<flatbuffers::Vector<int64_t>> int64s = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> float32s = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> strings = 0) {
  BlobBuilder builder_(_fbb);
  builder_.add_strings(strings);
  builder_.add_float32s(float32s);
  builder_.add_int64s(int64s);
  builder_.add_int32s(int32s);
  builder_.add_int8s(int8s);
  builder_.add_uint8s(uint8s);
  builder_.add_dataType(dataType);
  builder_.add_dims(dims);
  builder_.add_dataFormat(dataFormat);
  return builder_.Finish();
}

inline flatbuffers::Offset<Blob> CreateBlobDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *dims = nullptr,
    MNN_DATA_FORMAT dataFormat = MNN_DATA_FORMAT_NCHW,
    DataType dataType = DataType_DT_FLOAT,
    const std::vector<uint8_t> *uint8s = nullptr,
    const std::vector<int8_t> *int8s = nullptr,
    const std::vector<int32_t> *int32s = nullptr,
    const std::vector<int64_t> *int64s = nullptr,
    const std::vector<float> *float32s = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *strings = nullptr) {
  auto dims__ = dims ? _fbb.CreateVector<int32_t>(*dims) : 0;
  auto uint8s__ = uint8s ? _fbb.CreateVector<uint8_t>(*uint8s) : 0;
  auto int8s__ = int8s ? _fbb.CreateVector<int8_t>(*int8s) : 0;
  auto int32s__ = int32s ? _fbb.CreateVector<int32_t>(*int32s) : 0;
  auto int64s__ = int64s ? _fbb.CreateVector<int64_t>(*int64s) : 0;
  auto float32s__ = float32s ? _fbb.CreateVector<float>(*float32s) : 0;
  auto strings__ = strings ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*strings) : 0;
  return MNN::CreateBlob(
      _fbb,
      dims__,
      dataFormat,
      dataType,
      uint8s__,
      int8s__,
      int32s__,
      int64s__,
      float32s__,
      strings__);
}

flatbuffers::Offset<Blob> CreateBlob(flatbuffers::FlatBufferBuilder &_fbb, const BlobT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline BlobT *Blob::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new BlobT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Blob::UnPackTo(BlobT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = dims(); if (_e) { _o->dims.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->dims[_i] = _e->Get(_i); } } };
  { auto _e = dataFormat(); _o->dataFormat = _e; };
  { auto _e = dataType(); _o->dataType = _e; };
  { auto _e = uint8s(); if (_e) { _o->uint8s.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->uint8s[_i] = _e->Get(_i); } } };
  { auto _e = int8s(); if (_e) { _o->int8s.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->int8s[_i] = _e->Get(_i); } } };
  { auto _e = int32s(); if (_e) { _o->int32s.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->int32s[_i] = _e->Get(_i); } } };
  { auto _e = int64s(); if (_e) { _o->int64s.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->int64s[_i] = _e->Get(_i); } } };
  { auto _e = float32s(); if (_e) { _o->float32s.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->float32s[_i] = _e->Get(_i); } } };
  { auto _e = strings(); if (_e) { _o->strings.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->strings[_i] = _e->Get(_i)->str(); } } };
}

inline flatbuffers::Offset<Blob> Blob::Pack(flatbuffers::FlatBufferBuilder &_fbb, const BlobT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateBlob(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Blob> CreateBlob(flatbuffers::FlatBufferBuilder &_fbb, const BlobT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const BlobT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _dims = _o->dims.size() ? _fbb.CreateVector(_o->dims) : 0;
  auto _dataFormat = _o->dataFormat;
  auto _dataType = _o->dataType;
  auto _uint8s = _o->uint8s.size() ? _fbb.CreateVector(_o->uint8s) : 0;
  auto _int8s = _o->int8s.size() ? _fbb.CreateVector(_o->int8s) : 0;
  auto _int32s = _o->int32s.size() ? _fbb.CreateVector(_o->int32s) : 0;
  auto _int64s = _o->int64s.size() ? _fbb.CreateVector(_o->int64s) : 0;
  auto _float32s = _o->float32s.size() ? _fbb.CreateVector(_o->float32s) : 0;
  auto _strings = _o->strings.size() ? _fbb.CreateVectorOfStrings(_o->strings) : 0;
  return MNN::CreateBlob(
      _fbb,
      _dims,
      _dataFormat,
      _dataType,
      _uint8s,
      _int8s,
      _int32s,
      _int64s,
      _float32s,
      _strings);
}

inline const flatbuffers::TypeTable *MNN_DATA_FORMATTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    MNN_DATA_FORMATTypeTable
  };
  static const char * const names[] = {
    "NCHW",
    "NHWC",
    "NC4HW4",
    "NHWC4",
    "UNKNOWN"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 5, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *BlobTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_INT, 0, 1 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_CHAR, 1, -1 },
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_LONG, 1, -1 },
    { flatbuffers::ET_FLOAT, 1, -1 },
    { flatbuffers::ET_STRING, 1, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    MNN_DATA_FORMATTypeTable,
    DataTypeTypeTable
  };
  static const char * const names[] = {
    "dims",
    "dataFormat",
    "dataType",
    "uint8s",
    "int8s",
    "int32s",
    "int64s",
    "float32s",
    "strings"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 9, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

}  // namespace MNN

#endif  // FLATBUFFERS_GENERATED_TENSOR_MNN_H_
