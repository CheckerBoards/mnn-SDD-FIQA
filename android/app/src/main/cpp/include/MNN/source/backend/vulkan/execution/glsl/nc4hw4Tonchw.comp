#version 310 es
#define PRECISION mediump
precision PRECISION float;
layout(std430) buffer;

layout(set=0, binding=0) readonly buffer sourceBuffer{
    vec4 data[];
}uInBuffer;

layout(set=0, binding=1) writeonly buffer destBuffer{
    float data[];
} uOutBuffer;

layout(set=0, binding=2) uniform constBuffer{
    int width;
    int height;
    int channel;
    int batch;
} uConstant;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main()
{
    ivec3 pos = ivec3(gl_GlobalInvocationID);
    int batchIndex = pos.z % uConstant.batch;
    int zDiv4 = pos.z / uConstant.batch;
    int channelC4 = (uConstant.channel + 3) / 4;

    int lastZ = uConstant.channel / 4;
    int cIndex = uConstant.channel % 4;

    if (pos.x < uConstant.width && pos.y < uConstant.height)
    {
        vec4 color = uInBuffer.data[
            uConstant.width*pos.y
            + pos.x
            + uConstant.width*uConstant.height*zDiv4
            + batchIndex*uConstant.width*uConstant.height*channelC4
            ];
        int z = zDiv4*4;
        int basicOffset = z*uConstant.width*uConstant.height + (uConstant.width*(pos.y+uConstant.height*batchIndex*uConstant.channel)+pos.x);
        
        if(pos.z == lastZ)
        {
            if(cIndex == 1)
            {
                uOutBuffer.data[basicOffset+0] = color.r;
            }
            else if(cIndex == 2)
            {
                uOutBuffer.data[basicOffset+0] = color.r;
                uOutBuffer.data[basicOffset+1*uConstant.width*uConstant.height] = color.g;
            }
            else
            {
                uOutBuffer.data[basicOffset+0] = color.r;
                uOutBuffer.data[basicOffset+1*uConstant.width*uConstant.height] = color.g;
                uOutBuffer.data[basicOffset+2*uConstant.width*uConstant.height] = color.b;
            }
        }
        else
        {
            uOutBuffer.data[basicOffset+0] = color.r;
            uOutBuffer.data[basicOffset+1*uConstant.width*uConstant.height] = color.g;
            uOutBuffer.data[basicOffset+2*uConstant.width*uConstant.height] = color.b;
            uOutBuffer.data[basicOffset+3*uConstant.width*uConstant.height] = color.a;
        }

    }
}
