#version 440 core
layout(std140) buffer;
layout(set=0, binding=0, rgba16f) writeonly restrict mediump uniform image2D uOutput;
layout(set=0, binding=1) uniform mediump sampler2D uInput;
layout(set=0, binding=2) uniform mediump sampler2D uKernel;

layout(set=0, binding=3) readonly restrict uniform constBuffer {
    ivec4 outputSize;
    int multiLength;
}uConst;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main()
{
    ivec3 pos = ivec3(gl_GlobalInvocationID);
    if (pos.x < uConst.outputSize.x && pos.y < uConst.outputSize.y)
    {
        vec4 o0 = vec4(0);
        vec4 o1 = vec4(0);
        vec4 o2 = vec4(0);
        vec4 o3 = vec4(0);
        int kenerlY = pos.y + pos.z * uConst.outputSize.y;
        int srcY = pos.x + pos.z * uConst.outputSize.x;

        for (int k=0; k<uConst.multiLength; ++k)
        {
            vec4 k0 = texelFetch(uKernel, ivec2(4*k+0, kenerlY), 0);
            vec4 k1 = texelFetch(uKernel, ivec2(4*k+1, kenerlY), 0);
            vec4 k2 = texelFetch(uKernel, ivec2(4*k+2, kenerlY), 0);
            vec4 k3 = texelFetch(uKernel, ivec2(4*k+3, kenerlY), 0);

            vec4 s0 = texelFetch(uInput, ivec2(4*k+0, srcY), 0);
            vec4 s1 = texelFetch(uInput, ivec2(4*k+1, srcY), 0);
            vec4 s2 = texelFetch(uInput, ivec2(4*k+2, srcY), 0);
            vec4 s3 = texelFetch(uInput, ivec2(4*k+3, srcY), 0);

            mat4 K = mat4(k0, k1, k2, k3);

            o0 += K * s0;
            o1 += K * s1;
            o2 += K * s2;
            o3 += K * s3;
        }
        imageStore(uOutput, ivec2(srcY, 4*pos.y+0), o0);
        imageStore(uOutput, ivec2(srcY, 4*pos.y+1), o1);
        imageStore(uOutput, ivec2(srcY, 4*pos.y+2), o2);
        imageStore(uOutput, ivec2(srcY, 4*pos.y+3), o3);

    }

}